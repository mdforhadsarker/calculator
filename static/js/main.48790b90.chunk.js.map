{"version":3,"sources":["components/Keyboard.js","components/Screen.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["addInput","calculate","numberOfine","style","flex","display","flexDirection","className","onClick","input","useState","setInput","Screen","Keyboard","char","newInput","Function","App","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAEe,cAA2B,IAAzBA,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,UACtB,OACI,yBAAKC,YAAa,EAAGC,MAAO,CAACC,KAAK,EAAEC,QAAQ,OAAQC,cAAc,WAC9D,yBAAKH,MAAO,CAACE,QAAQ,OAAOD,KAAK,IAC7B,yBAAKG,UAAU,YACX,yBAAKA,UAAU,cACXC,QAAS,WAAMR,EAAS,OAD5B,MAGJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,UAGR,yBAAKG,MAAO,CAACE,QAAQ,OAAOD,KAAK,IAC7B,yBAAKG,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,OAGR,yBAAKG,MAAO,CAACE,QAAQ,OAAOD,KAAK,IAC7B,yBAAKG,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,OAGR,yBAAKG,MAAO,CAACE,QAAQ,OAAOD,KAAK,IAC7B,yBAAKG,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,MAEJ,yBAAKO,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMP,EAAU,OAAtD,MAEJ,yBAAKM,UAAU,YACX,yBAAKA,UAAU,cAAcC,QAAS,WAAMR,EAAS,OAArD,SCzDL,cAAc,IAAZS,EAAW,EAAXA,MACb,OACI,yBAAKF,UAAU,UACX,2BAAIE,KCDF,aAAO,IAAD,EACUC,mBAAS,IADnB,mBACTD,EADS,KACFE,EADE,KA8BhB,OACI,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,cAAf,cACI,kBAACK,EAAD,CAAQH,MAAOA,IACf,kBAACI,EAAD,CAAUb,SA7BL,SAACc,GACd,IAAIC,EAAWN,EAEfE,EADAI,GAAYD,IA2B0Bb,UAhBxB,WACdU,EAKO,IAAIK,SAAS,UALFP,EAKX,OAWH,yBAAKF,UAAU,cAAcC,QAvBlB,WAChBG,EAAS,CAAC,OAsBL,W,MCxBGM,MAVf,WACE,OACE,yBAAKV,UAAU,OAEb,kBAACW,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.48790b90.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default ({addInput,calculate}) => {\r\n    return (\r\n        <div numberOfine={1} style={{flex:1,display:\"flex\", flexDirection:\"column\"}}>\r\n            <div style={{display:\"flex\",flex:1}}>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" \r\n                        onClick={()=> {addInput(\"7\")}}>7</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"8\")}}>8</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"9\")}}>9</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"/\")}}>รท</div>\r\n                </div>\r\n            </div>\r\n            <div style={{display:\"flex\",flex:1}}>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"4\")}}>4</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"5\")}}>5</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"6\")}}>6</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"*\")}}>x</div>\r\n                </div>\r\n            </div>\r\n            <div style={{display:\"flex\",flex:1}}>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"1\")}}>1</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"2\")}}>2</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"3\")}}>3</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"-\")}}>-</div>\r\n                </div>\r\n            </div>\r\n            <div style={{display:\"flex\",flex:1}}>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"0\")}}>0</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\".\")}}>.</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {calculate(\"=\")}}>=</div>\r\n                </div>\r\n                <div className=\"centerme\">\r\n                    <div className=\"roundButton\" onClick={()=> {addInput(\"+\")}}>+</div>\r\n                </div>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default ({input}) => {\r\n    return (\r\n        <div className=\"screen\">\r\n            <p>{input}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport Keyboard from './Keyboard'\r\nimport Screen from './Screen'\r\n\r\nexport default() => {\r\n    const [input, setInput] = useState('');\r\n\r\n    //Add input\r\n\r\n    const addInput = (char) => {\r\n        let newInput = input;\r\n        newInput += char;\r\n        setInput(newInput)\r\n    }\r\n    //Clear Input \r\n\r\n    const clearInput = () =>{\r\n       setInput(['']); \r\n    }\r\n\r\n    //Calculate\r\n\r\n    const calculate = () =>{\r\n        setInput(evaluate(input))\r\n    }\r\n\r\n    function evaluate(fn) {\r\n        // eslint-disable-next-line no-new-func\r\n        return new Function('return ' + fn)();\r\n      }\r\n      \r\n      //console.log( calculate('12/5*9+9.4*2') ); // => 40.4\r\n\r\n\r\n    return (\r\n        <div className=\"calc\">\r\n            <div className=\"calcHeader\">Calculator</div>\r\n                <Screen input={input}/>\r\n                <Keyboard addInput={addInput} calculate={calculate}/>\r\n            <div className=\"clearButton\" onClick={clearInput}>\r\n                Clear\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React from 'react';\nimport Calculator from './components/Calculator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Calculator/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}